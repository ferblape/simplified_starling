== Simplified Starling

Works with Starling 0.9.6 or edge. You can follow these steps to build it.

    sudo gem install newgem eventmachine rails_analyzer_tools memcache-client
    git clone git://github.com/anotherbritt/starling.git
    cd starling && rake gem && cd pkg && sudo gem install starling-0.9.6.gem

With +starling+ installed in your machine you can start/stop/restart the daemon 
by running.

    $ rake simplified:starling:start
    $ rake simplified:starling:stop
    $ rake simplified:starling:restart

You can put anything into Starling, but after using Starling on a couple of 
projects I've seen I use always the same hash for storing the jobs. This will 
push into the queue the task +test_rendering+ which belongs to a model.

    ##
    # From a model/controller
    #
    newsletter = Newsletter.find(params[:id])
    newsletter.push('test_rendering')
    => STARLING.set('newsletters', { :type => 'Newsletter', 
                                     :id => 1, 
                                     :task => 'test_rendering' })

You can overwrite the queue by adding the queue name

    ##
    # From a model/controller
    #
    newsletter = Newsletter.find(params[:id])
    newsletter.push('test_rendering', 'my_queue')
    => STARLING.set('my_queue', { :type => 'Newsletter', 
                                  :id => 1, 
                                  :task => 'test_rendering' })

You can even push a class task into the queue. This will push into the queue 
the task +recalculate+ which belongs to a model.

    ##
    # From a model/controller
    #
    Stock.push('recalculate')
    => STARLING.set('stocks', { :type => 'Stock', 
                                :task => 'recalculate' })

To list the current queues.

    $ rake simplified:starling:queues
    == [SIMPLIFIED STARLING] =====================================
    => stocks[2], newsletters[1]

Once your application is running you'll be pushing tasks to a queue. With a 
background process you can start poping those tasks from the queue.

    $ rake simplified:starling:start_processor QUEUE=newsletters
    $ rake simplified:starling:stop_processor QUEUE=newsletters

== Example

    ##
    # app/controllers/typus/newsletters_controller.rb
    #
    class Typus::NewslettersController < TypusController
    
      def test
        Newsletter.find(params[:id]).push('test_rendering')
      end
    
    end

    ##
    # app/models/newsletter.rb
    #
    class Newsletter < ActiveRecord::Base
    
      ##
      # Your long-running task.
      #
      def test_rendering
      end
    
    end

== Acknowledgments

- Blaine Cook, Twitter Inc. for this nice queue system.

Copyright (c) 2008 Francesc Esplugas Marti, released under the MIT license