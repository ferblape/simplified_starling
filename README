Simplified Starling
===================

NOTE: This is work in progress, I'm currently extracting this from a project.

With starling installed in your machine you can start the daemon by running.

    rake simplified:starling:start
    rake simplified:starling:stop

You can put anything into Starling, but after using Starling on a couple of 
projects I've seen I use always the same hash for storing the jobs.

    newsletter = Newsletter.find(params[:id])
    newsletter.push('test_rendering')

This will push into the queue the task `test_rendering` which belongs to a model.

    STARLING.set('newsletters', { :type => 'Newsletter', 
                                  :id => 1, 
                                  :task => 'test_rendering' })

You can overwrite the queue by adding the queue name

    newsletter.push('test_rendering', 'my_queue')
    => STARLING.set('my_queue', { :type => 'Newsletter', 
                                  :id => 1, 
                                  :task => 'test_rendering' })

Once your application is running you'll be pushing tasks to a queue. With a 
background process you can start poping those tasks from the queue.

    rake simplified:starling:start_processor QUEUE=newsletter
    rake simplified:starling:stop_processor QUEUE=newsletter

To Do List
==========

- Create YAML file with the configuration
- Store pid file of queue.
- Test.
- Make the rake tasks work.

Example
=======

    ##
    # app/controllers/typus/newsletters_controller.rb
    #
    class Typus::NewslettersController < TypusController
    
      def test
        Newsletter.find(params[:id]).push('test_rendering')
      end
    
    end

    ##
    # app/models/newsletter.rb
    #
    class Newsletter < ActiveRecord::Base
    
      ##
      # Your task
      #
      def test_rendering
      end
    
    end

Copyright (c) 2008 Francesc Esplugas Marti, released under the MIT license